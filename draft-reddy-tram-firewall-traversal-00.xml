<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-reddy-tram-firewall-traversal-00"
     ipr="trust200902">
  <front>
    <title abbrev="WebRTC UDP Firewall Traversal">WebRTC UDP Firewall
    Traversal</title>

    <author fullname="Tirumaleswar Reddy" initials="T." surname="Reddy">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <email>tireddy@cisco.com</email>
      </address>
    </author>

    <date />

    <workgroup>TRAM</workgroup>

    <abstract>
      <t>This document discusses possible techniques to allow WebRTC based
      media streams and data channels to traverse firewalls.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>The Web Real-Time communication (WebRTC) framework <xref
      target="I-D.ietf-rtcweb-overview"></xref> provides the protocol building
      blocks to support direct, interactive, real-time communication using
      audio, video, collaboration, games, etc., between peer web browsers. For
      their peer to peer communication, WebRTC uses Interactive Connectivity
      Establishment (ICE) protocol <xref target="RFC5245"></xref> for
      gathering address candidates and doing connectivity checks. Security
      policies of enterprise networks typically require filtering incoming
      unsolicited traffic, blocking certain protocols, and doing
      application-level filtering and scanning for spam, malware, and
      intellectual property. Most of these protocols run over TCP and are well
      supported by firewalls and application-specific proxy functions. Because
      most protocols use TCP, many enterprise firewalls are configured to
      simply block UDP.</t>

      <t>This document discusses what makes UDP more difficult to enable on a
      firewall, and how existing firewall policies can be retained with
      WebRTC.</t>
    </section>

    <section anchor="term" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section anchor="TCP" title="TCP traversal not problematic">
      <t>TCP clearly indicates the beginning of a flow (SYN) and end of a flow
      (FIN or RST). This is used by firewalls to open and close pinholes.
      Exceptionally, a TCP connection that has received no traffic for a long
      time also has its pinhole closed (to accommodate network topology
      changes or failure of both TCP peers). Firewalls also perform protocol
      validation to clean up problems with out-of-window TCP segments and
      overlapping TCP segments. This allows the firewall to protect the
      network and protect hosts from several attack vectors (replay attacks,
      host IP address probing, DDOS attack etc.).</t>
    </section>

    <section anchor="UDP" title="UDP traversal not problematic">
      <t>For UDP flows the first outgoing packet on a 5-tuple will be used by
      the firewall as a start-of-session indicator. But UDP does not have an
      end-of-session indicator, so the firewall has only two ways to close a
      pinhole: timing out the pinhole after the interior host does not send
      traffic for several seconds or the interior host generates a fatal ICMP
      error. Because there is no reliable way to determine that a session is
      being stopped, the firewall has a much harder job. It could implement an
      ALG and be aware of whatever semantics are imposed by the higher-level
      code on top of UDP. It could also rely on a set of well know application
      servers to inform it of sessions as they start and end, but that suffers
      from many challenges like application servers hosted independently of
      the network on which they are used. Using the ALG, a firewall can
      determine when the call is terminated and close any dynamic mappings
      created for the media session. But the problem is session signaling
      between the WebRTC application running in the browser and the Web server
      could be using TLS, in which case the ALG no longer has access to the
      signaling. Moreover, WebRTC does not enforce a particular session
      signaling protocol to be used, so firewalls using ALGs would fail to
      inspect the signaling to identify the 5-tuple used for each media
      stream. Furthermore, the session signaling and the peer-to-peer media
      may traverse different Firewalls. In the absence of an ALG or help from
      application servers, there is no way to deterministically tell that this
      session has been idle for a while or has ended. The net effect is that a
      firewall that does a good job with general UDP traffic is much more
      resource intensive than the same functionality for a set of TCP
      sessions. &ldquo;Resource intensive&rdquo; strongly correlates to
      &ldquo;expensive&rdquo; and &ldquo;brittle&rdquo;. This tends to cause
      network operators to block all UDP traffic except for the protocols that
      they absolutely have to have.</t>
    </section>

    <section anchor="solution" title="Solution overview">
      <t>The following sections outline and provide some analysis of various
      solutions to the issues raised regarding WebRTC media traversing
      firewalls.</t>

      <section title="TURN">
        <t>Traversal Using Relays around NAT (TURN) <xref
        target="RFC5766"></xref> is a protocol that is often used to improve
        the connectivity of Peer-to-Peer (P2P) applications (as defined in
        Section 2.7 of <xref target="RFC5218"></xref>). TURN allows a
        connection to be established when one or both sides are incapable of a
        direct P2P connection. The TURN server is also a building block to
        support interactive, real-time communication using audio, video,
        collaboration, games, etc., between two peer web browsers using the
        Web Real-Time Communication (WebRTC) framework. Firewall traversal
        using TURN Enterprise Firewall policy typically has a white-list of
        permitted outside applications/sites and can blacklist HTTP(S)
        connections via various forms of detections (DNS lookup, ALPN, HTTP
        URL Filtering, DPI proxy that at least performs HTTPS inspection of
        SNI in TLS exchange and validates SSL records, HTTP(S) proxy etc.).
        Firewall in this configuration would block TCP/UDP connection external
        peers in the Internet and arbitrary TURN servers. For example firewall
        would block usage of STUN with external peers and force the clients to
        use enterprise provided TURN server for all external WebRTC media
        communications.</t>

        <t>Enterprise firewall to permit WebRTC media streams and data
        channels will be configured to permit UDP, TCP traffic to well-known
        TURN servers. Enterprise TURN server can use third party authorization
        <xref target="I-D.ietf-tram-turn-third-party-authz"></xref> to
        distinguish between business and social calls. Enterprise provided
        TURN server will have to support both first and third party
        authorization. This way client can use third party authorization for
        WebRTC servers that have business relationship with the Enterprise
        network and use first party authentication for non-business related
        calls.</t>
      </section>

      <section title="STUN inspection">
        <t>The STUN <xref target="RFC5389"></xref> inspection logic discussed
        in <xref target="I-D.jennings-behave-rtcweb-firewall"></xref> can be
        used by firewalls to open and close firewall mapping for WebRTC media
        streams and data channels.</t>
      </section>

      <section title="STUN request to close firewall mapping">
        <t>TBD</t>

        <t>Introduce a new STUN request (Bye) to signal middle boxes to close
        the mapping. If firewall sees a success response for the Bye request
        then it closes the mapping immediately.</t>
      </section>

      <section title="SDN controller programming firewall">
        <t>Enterprise leveraging cloud conferencing server may have a
        restricted firewall policy to only permit UDP traffic to cloud
        conferencing provided candidate addresses. The problem is that these
        candidate addresses could keep changing causing the firewall policy to
        be frequently modified with human intervention. This problem can be
        solved by the cloud conferencing server communicating its media
        candidate addresses to the SDN controller in the enterprise network
        using RESTCONF <xref target="I-D.ietf-netconf-restconf"></xref> and
        the SDN controller in-turn configures SDN controlled firewalls using
        NETCONF <xref target="RFC6241"></xref> to permit UDP traffic to the
        cloud conferencing provided candidate addresses.</t>

        <t>Enterprise that has business agreement with an application or third
        party provider hosting TURN servers may have a firewall policy to only
        permit UDP traffic to the external TURN servers provided by the
        application or third party provider. But the problem is that these
        TURN addresses could keep changing resulting in the firewall rules to
        be frequently modified with human intervention. This problem can be
        solved by the provider hosting the TURN servers to communicate the
        TURN server IP addresses to the SDN controller deployed in the
        enterprise network using RESTCONF and the SDN controller in-turn
        configures enterprise firewalls using NETCONF to permit UDP traffic to
        the TURN servers.</t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>TODO</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <section title="Bye Request">
        <t>This section lists the codepoint for the new STUN method defined in
        this specification.</t>

        <t>TODO : Bye </t>
      </section>
    </section>

    <section title="Acknowledgements">
      <t>TODO</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.5389"?>

      <?rfc include="reference.RFC.5766"?>

      <?rfc include="reference.RFC.6241"?>

      <?rfc include='reference.I-D.ietf-tram-turn-third-party-authz'?>

      <?rfc include='reference.I-D.ietf-netconf-restconf'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.5218"?>

      <?rfc include="reference.RFC.5245"?>

      <?rfc include='reference.I-D.ietf-rtcweb-overview' ?>

      <?rfc include="reference.I-D.jennings-behave-rtcweb-firewall"?>

      <!---->
    </references>
  </back>
</rfc>
